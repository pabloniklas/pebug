#!/usr/bin/env python3

import os
import re
import readline
import sys

from classes.Cpu import Cpu
from classes.Memory import Memory


def pebug_main():
    print("")

    memory = Memory(65536)
    stack = Memory(1)
    cpu = Cpu(memory)

    prompt = "[C]=> "

    print("pebug - An x86 old-debug-like program written in Python.")
    print("By Pablo Niklas <pablo.niklas@gmail.com>")
    print(f"Main memory size: {memory.pages} pages.")
    print(f"Stack size: {stack.pages} page/s.")

    """https://montcs.bloomu.edu/Information/LowLevel/DOS-Debug.html"""
    cmd = input(f"{prompt}")
    while not re.match("^[qQ]", cmd):

        if re.match("^[sS] [0-9a-f]{,4} .*$", cmd):
            search(memory, cmd)
        elif re.match("^[hH] [0-9a-f]{,4} [0-9a-f]{,4}$", cmd):
            hex_cmd(cmd)
        elif re.match("^[rR]$", cmd):
            cpu.print_registers()
            cpu.print_status()
        elif re.match("^[cC] [0-9a-f]{,4} [0-9a-f]{,4} [0-9a-f]{,4}$", cmd):
            compare(memory, cmd)
        elif re.match("^[oO][vV]$", cmd):
            cpu.of = 0b1
        elif re.match("^[nN][vV]$", cmd):
            cpu.of = 0b0
        elif re.match("^[nN][gG]$", cmd):
            cpu.sf = 0b1
        elif re.match("^[pP][lL]$", cmd):
            cpu.sh = 0b0
        elif re.match("^[zZ][rR]$", cmd):
            cpu.zf = 0b1
        elif re.match("^[nN][zZ]$", cmd):
            cpu.zf = 0b0
        elif re.match("^[aA][cC]$", cmd):
            cpu.ac = 0b1
        elif re.match("^[nN][aA]$", cmd):
            cpu.ac = 0b0
        elif re.match("^[pP][eE]$", cmd):
            cpu.op = 0b1
        elif re.match("^[pP][oO]$", cmd):
            cpu.op = 0b0
        elif re.match("^[cC][yY]$", cmd):
            cpu.cy = 0b1
        elif re.match("^[nN][cC]$", cmd):
            cpu.vy = 0b0
        elif cmd=="?":
            help()
        elif re.match("^[fF] [0-9a-f]{,4} [0-9a-f]{,4}$", cmd):
            reset_memory_range(memory, cmd)
        elif re.match("^[fF] [0-9a-f]{,4} [0-9a-f]{,4} .*$", cmd):
            fill_memory_range(memory, cmd)
        elif re.match("^[dD] [0-9a-f]{,4} [0-9a-f]{,4}$", cmd):
            display(memory, cmd)
        elif re.match("^[sS][pP] [0-9a-f]{,4}$", cmd):
            setting_memory_page(memory, cmd)
        elif re.match("^[eE] [0-9a-f]{,4} [0-9a-f]{,2}$", cmd):
            byte_poke(memory, cmd)
        elif re.match("^[eE] [0-9a-f]{,4} ['].*[']$", cmd):
            string_poke(memory, cmd)
        elif re.match("[dD][eE][mM][oO]", cmd):
            demo(memory)
        else:
            print("Input not recognized. Enter <?> for a quick help.")

        cmd = input(f"{prompt}")


def string_poke(memory, cmd):
    args = cmd.split(" ")
    address = int(args[1], 16)
    args[2]=args[2][1:]     # To strip the initial '
    value = " ".join(args[2:])
    memory.load_into(memory.active_page, address, value)


def byte_poke(memory, cmd):
    args = cmd.split(" ")
    address = int(args[1], 16)
    value = int(args[2], 16)
    memory.poke(memory.active_page, address, value)


def compare(memory, cmd):
    args = cmd.split(" ")
    oper1 = int(args[1], 16)
    oper2 = int(args[2], 16)
    oper3 = int(args[3], 16)
    list = memory.compare(oper1, oper2, oper3)
    for aa in list:
        print(aa)


def hex_cmd(cmd):
    args = cmd.split(" ")
    oper1 = int(args[1], 16)
    oper2 = int(args[2], 16)
    res_add = oper1 + oper2
    res_sub = oper1 - oper2
    print('%04X' % res_add, '%04X'% res_sub)


def search(memory, cmd):
    args = cmd.split(" ")
    start = int(args[1], 16)
    pattern = args[2]
    list = memory.search(start, pattern)
    for aa in list:
        print(aa)


def reset_memory_range(memory, cmd):
    args = cmd.split(" ")
    start = int(args[1], 16)
    end = int(args[2], 16)
    memory.fill(start, end, chr(0))


def fill_memory_range(memory, cmd):
    args = cmd.split(" ")
    start = int(args[1], 16)
    end = int(args[2], 16)
    pattern = args[3]
    memory.fill(start, end, pattern)


def setting_memory_page(memory, cmd):
    arg = cmd.split(" ")
    memory.active_page = int(arg[1], 16)


def display(memory, cmd):
    args = cmd.split(" ")
    a = int(args[1], 16)
    b = int(args[2], 16)
    memory.display(a, b)


def help():
    print(
"""List of Available Commands:

    General purpose:

    Dump => D [range]: Displays the contents of a block of memory
    Fill => F range list: This command can also be used to clear 
            large areas of Memory as well as filling smaller areas with a
            continuously repeating phrase or single byte.
    Hex calc => H: A simple hex calculator.
    Search => S start text: Search for the text in the current page,
            starting from start.
    Quit => Q: Exit the program.
    
    +-------------------------+-----+-------+
    | Flag Name               | Set | Clear |
    +-------------------------+-----+-------+
    | Overflow(yes/no)        | ov  | nv    |
    | Sign(negative/positive) | ng  | pl    |
    | Zero(yes/no)            | zr  | nz    |
    | Auxiliary carry(yes/no) | ac  | na    |
    | Parity(even/odd)        | pe  | po    |
    | Carry(yes/no)           | cy  | nc    |
    +-------------------------+-----+-------+
    
""")


def demo(memory):
    memory.load_into(49152, 0, "This is a demo. Welcome.")  # TODO: Random text (like fortune)
    print("The demo text was loaded into C000:0000, type 'd 0 30' to read it.")


# Python's entry point
if __name__ == '__main__':

    # readline's history
    histfile = os.path.join(os.path.expanduser("~"), ".pebughist")
    try:
        readline.read_history_file(histfile)
        readline.set_history_length(1000)
    except IOError:
        pass

    pebug_main()

    readline.write_history_file(histfile)
    sys.exit(0)
