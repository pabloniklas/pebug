#!/usr/bin/env python3
"""
# pebug - A Python x86 DOS-debug-inspired program
# Copyright (C) 2023 Pablo Niklas <"""

import os
import re
import readline
import sys
import random

from enum import Enum
from multipledispatch import dispatch

from modules.Disk import Disk
from modules.Memory import Memory
from modules.CpuX8086 import CpuX8086
from modules.Terminal import Terminal, AnsiColors


def pebug_main(terminal: Terminal, filename="pebug_disk.bin"):
    """Main entry point for the Pebug x86 DOS-debug-inspired program.

    This function initializes the terminal interface, memory, virtual disk, and CPU emulator,
    then enters a command loop to interactively process user commands for debugging, memory
    inspection, assembly, and disk operations.
    
    Args:
        terminal (Terminal): The terminal interface for user interaction and output.
        filename (str, optional): The filename of the virtual disk to use. Defaults to "pebug_disk.bin".

        - https://montcs.bloomu.edu/Information/LowLevel/DOS-Debug.html

    Behavior:
        - Initializes memory (640 KB), virtual disk (64 KB), and CPU (8086 emulator).
        - Displays program banner and information.
        - Loads command history and disk contents.
        - Enters a command loop, supporting commands for:
            * Memory search, display, fill, reset, move, poke (byte/string)
            * Register display and flag manipulation
            * Disk read/write/cat
            * Assembly mode for entering instructions
            * Demo mode and parsing instructions
            * Exiting and saving disk state
        - Provides user feedback and error messages for unrecognized commands.
        - Saves the virtual disk state on exit.

    Note:
        - Command syntax and supported instructions are inspired by DOS DEBUG.
        - Online manual available at https://pebug.readthedocs.io
    Main method

    Keyword arguments:
    filename: the filename of the virtual disk (default is pebug_disk.bin)

    References:
       https://montcs.bloomu.edu/Information/LowLevel/DOS-Debug.html

    """

    class Mode(Enum):
        """Enum for the different modes of the program."""
        COMMAND = "🅒 "
        ASSEMBLE = "🅐 "

    memory = Memory(10)  # 640 Kb

    disk = Disk(65536, filename)  # 64Kb
    disk.load()

    cpu = CpuX8086()
    cpu.instruction_parser.register_collection.set('SP', 0xFFFE)

    # From https://patorjk.com/software/taag/#p=testall&f=Graffiti&t=PEBUG

    print(f"""{AnsiColors.BRIGHT_YELLOW.value}
░       ░░░        ░░       ░░░  ░░░░  ░░░      ░░
▒  ▒▒▒▒  ▒▒  ▒▒▒▒▒▒▒▒  ▒▒▒▒  ▒▒  ▒▒▒▒  ▒▒  ▒▒▒▒▒▒▒
▓       ▓▓▓      ▓▓▓▓       ▓▓▓  ▓▓▓▓  ▓▓  ▓▓▓   ▓
█  ████████  ████████  ████  ██  ████  ██  ████  █
█  ████████        ██       ████      ████      ██{AnsiColors.RESET.value}
                                                  {AnsiColors.BRIGHT_GREEN.value}v1.1{AnsiColors.RESET.value}
    """)

    terminal.info_message(
        "An x86 DOS-debug-inspired program written in Python.")
    terminal.info_message(
        f"By {AnsiColors.BRIGHT_CYAN.value}Pablo Niklas <pablo.niklas@gmail.com>.{AnsiColors.RESET.value}")
    terminal.info_message(
        f"Online manual at {AnsiColors.BRIGHT_BLUE.value}https://pebug.readthedocs.io{AnsiColors.RESET.value}")
    terminal.info_message(
        f"History file: {AnsiColors.BRIGHT_YELLOW.value}{readline.get_history_length()} lines loaded.{AnsiColors.RESET.value}")
    terminal.info_message(
        f"Main memory size: {AnsiColors.BRIGHT_YELLOW.value}{memory.pages} pages.{AnsiColors.RESET.value}")
    terminal.info_message(
        f"Stack @ {AnsiColors.BRIGHT_YELLOW.value}{cpu.get_hex(cpu.instruction_parser.register_collection.get('SP'))}.{AnsiColors.RESET.value}")
    terminal.info_message(
        f"Virtual disk size: {AnsiColors.BRIGHT_YELLOW.value}{disk.get_size()} bytes.{AnsiColors.RESET.value}")
    terminal.info_message(f"Supported instructions: {AnsiColors.BRIGHT_MAGENTA.value}{len(cpu.instructions_set)} {AnsiColors.WHITE.value}({', '.join(sorted(cpu.instructions_set))}){AnsiColors.RESET.value}")
    terminal.info_message(
        f"Supported registers: {AnsiColors.BRIGHT_GREEN.value}{len(cpu.register_set)} {AnsiColors.WHITE.value}({', '.join(sorted(cpu.register_set))}){AnsiColors.RESET.value}")
    print("")
    terminal.info_message(
        "Type 'q' to quit the program.\033[0m")

    cmd = prompt(Mode.COMMAND.value)
    while not re.match(r"^[qQ]", cmd):

        if re.match(r"^[sS] [0-9a-f]{,4} .*$", cmd):
            search(cpu, memory, cmd, terminal)
        elif re.match(r"^[hH] [0-9a-f]{,4} [0-9a-f]{,4}$", cmd):
            hex_cmd(cmd, terminal)
        elif re.match(r"^[rR]$", cmd):
            cpu.print_registers()
        elif re.match(r"^[cC] [0-9a-f]{,4} [0-9a-f]{,4} [0-9a-f]{,4}$", cmd):
            compare(cpu, memory, cmd, terminal)
        elif re.match(r"^[cC][aA][tT] [0-9a-f]{,4} [0-9a-f]{,4}$", cmd):
            cat(cpu, disk, cmd)
        elif re.match(r"^[mM] [0-9a-f]{,4} [0-9a-f]{,4} [0-9a-f]{,4}$", cmd):
            move(cpu, memory, cmd)
        elif re.match(r"^[oO][vV]$", cmd):
            cpu.OF = 0b1
        elif re.match(r"^[nN][vV]$", cmd):
            cpu.OF = 0b0
        elif re.match(r"^[nN][gG]$", cmd):
            cpu.SF = 0b1
        elif re.match(r"^[pP][lL]$", cmd):
            cpu.sh = 0b0
        elif re.match(r"^[zZ][rR]$", cmd):
            cpu.ZF = 0b1
        elif re.match(r"^[nN][zZ]$", cmd):
            cpu.ZF = 0b0
        elif re.match(r"^[aA][cC]$", cmd):
            cpu.AC = 0b1
        elif re.match(r"^[nN][aA]$", cmd):
            cpu.AC = 0b0
        elif re.match(r"^[pP][eE]$", cmd):
            cpu.OP = 0b1
        elif re.match(r"^[pP][oO]$", cmd):
            cpu.OP = 0b0
        elif re.match(r"^[cC][yY]$", cmd):
            cpu.CY = 0b1
        elif re.match(r"^[nN][cC]$", cmd):
            cpu.vy = 0b0
        elif re.match(r"^[fF] [0-9a-f]{,4} [0-9a-f]{,4}$", cmd):
            reset_memory_range(cpu, memory, cmd)
        elif re.match(r"^[fF] [0-9a-f]{,4} [0-9a-f]{,4} .*$", cmd):
            fill_memory_range(cpu, memory, cmd)
        elif re.match(r"^[dD] [0-9a-f]{,4} [0-9a-f]{,4}$", cmd):
            display(cpu, memory, cmd)
        elif re.match(r"^[sS][pP] [0-9a-f]{,4}$", cmd):
            setting_memory_page(memory, cmd)
        elif re.match(r"^[eE] [0-9a-f]{,4} [0-9a-f]{,2}$", cmd):
            byte_poke(memory, cmd)
        elif re.match(r"^[eE] [0-9a-f]{,4} ['].*[']$", cmd):
            string_poke(cpu, memory, cmd)
        elif re.match(r"^[dD][eE][mM][oO]$", cmd):
            demo(cpu, memory, terminal)
        elif re.match(r"^[wW] [0-9a-f]{,4} [0-9a-f]{,4} [0-9a-f]{,4}$", cmd):
            write(disk, memory, cpu, cmd)
        elif re.match(r"^[lL] [0-9a-f]{,4} [0-9a-f]{,4} [0-9a-f]{,4}$", cmd):
            read(disk, memory, cpu, cmd)
        # elif re.match(r"^[nN] ['].*[']$", cmd): # To be used in the future
        #    setname(disk, cmd)
        elif re.match(r"^[pP] .*$", cmd):
            parse(cpu, memory, cmd)

        # Assemble mode.
        elif re.match(r"^[aA]$", cmd):
            terminal.info_message(
                "Welcome to the Assemble mode. Enter 'q' to quit this mode.")
            terminal.info_message(
                "Numbers must be in hexadecimal (0x), Decimal, or Binary (0b) format.")
            cmd = prompt(
                f"{Mode.ASSEMBLE.value} {'%04X' % memory.active_page}:{'%04X' % memory.offset_cursor}")
            while not re.match(r"^[qQ]$", cmd):
                machine_code = cpu.assemble(memory, cmd)
                for mc in machine_code:
                    memory.poke(memory.active_page, memory.offset_cursor, mc)
                    memory.offset_cursor += 1

                cmd = prompt(
                    f"{Mode.ASSEMBLE.value} {'%04X' % memory.active_page}:{'%04X' % memory.offset_cursor}")
        else:
            _error_msg(terminal)

        mode = Mode.COMMAND.value
        cmd = prompt(mode)

    # Save the virtual disk to a real disk.
    disk.save()


def _error_msg(term: Terminal):
    term.error_message("Input not recognized.")


@dispatch(object, str, int, int, object)
def _show_result(cpu: CpuX8086, oper: str, a: int, r: int, term: Terminal):
    """
    Displays the result of a CPU operation in both binary and hexadecimal formats, and prints the CPU status flags.

    Args:
        cpu (CpuX8086): The CPU instance performing the operation.
        oper (str): The operation name (e.g., 'ADD', 'SUB').
        a (int): The first operand value.
        r (int): The result value after the operation.
        term (Terminal): The terminal interface for displaying messages.

    Side Effects:
        Prints an informational message to the terminal and outputs the CPU status flags.
    """
    oper = oper.upper()
    bin_a = cpu.get_bin(a)
    bin_r = cpu.get_bin(r)
    term.info_message(f"{oper} {bin_a}({'%02X' % a}) => {bin_r}({'%02X' % r})")
    cpu.print_status_flags()


@dispatch(object, str, int, int, int, object)
def _show_result(cpu: CpuX8086, oper: str, a: int, b: int, r: int, term: Terminal):
    oper = oper.upper()
    bin_a = cpu.get_bin(a)
    bin_b = cpu.get_bin(b)
    bin_r = cpu.get_bin(r)
    term.info_message(
        f"{oper} {bin_a}({'%02X' % a}) {bin_b}({'%02X' % b}) => {bin_r}({'%02X' % r})")
    cpu.print_status_flags()

def setname(disk: Disk, cmd: str):
    """ the name of the virtual disk by parsing the provided command string.

    This function expects the command string to contain the filename as the second argument,
    potentially prefixed with a single quote ('). It strips the initial quote and sets the
    disk's filename accordingly.

        disk (Disk): The Disk object whose filename is to be set.
        cmd (str): The command string containing the new filename.

    Example:
        setname(disk, "setname 'mydisk.img'")
    """
    args = cmd.split(" ")
    args[1] = args[1][1:]  # To strip the initial '
    filename = " ".join(args[1:])
    disk.filename(filename)


def parse(cpu: CpuX8086, memory: Memory, cmd: str):
    """Parse the assembler instruction

    Args:
        cpu (CpuX8086): CPU Object.
        cmd (str): Command string to be parsed.
    """
    args = cmd.split(" ")
    line = args[1:]
    cpu.parse_instruction(" ".join(line), memory)


def write(disk: Disk, memory: Memory, cpu: CpuX8086, cmd: str):
    """Write to vdisk the Memory object.

    Args:
        disk (Disk): Disk object.
        memory (Memory): Memory object.
        cpu (CpuX8086): CPU Object.
        cmd (str): Command string to be parsed.
    """
    args = cmd.split(" ")
    address = int(args[1], 16)
    firstsector = int(args[2], 16)
    number = int(args[3], 16)
    cpu.write_to_vdisk(memory, disk, address, firstsector, number)


def read(disk: Disk, memory: Memory, cpu: CpuX8086, cmd: str):
    """Read from vdisk to the Memory object.

    Args:
        disk (Disk): Disk object.
        memory (Memory): Memory object.
        cpu (CpuX8086): CPU Object.
        cmd (str): Command string to be parsed.
    """
    args = cmd.split(" ")
    address = int(args[1], 16)
    firstsector = int(args[2], 16)
    number = int(args[3], 16)
    cpu.read_from_vdisk(memory, disk, address, firstsector, number)


def move(cpu: CpuX8086, memory: Memory, cmd: str):
    """Move data from one memory location to another.

    Args:
        cpu (CpuX8086): CPU Object.
        memory (Memory): Memory object.
        cmd (str): Command string to be parsed.
    """
    args = cmd.split(" ")
    oper1 = int(args[1], 16)
    oper2 = int(args[2], 16)
    oper3 = int(args[3], 16)
    cpu.move(memory, oper1, oper2, oper3)


def string_poke(cpu: CpuX8086, memory: Memory, cmd: str):
    """Load a string into memory.

    Args:
        cpu (CpuX8086): CPU Object.
        memory (Memory): Memory object.
        cmd (str): Command string to be parsed.
    """
    args = cmd.split(" ")
    address = int(args[1], 16)
    args[2] = args[2][1:]  # To strip the initial '
    value = " ".join(args[2:])
    cpu.load_into(memory, address, value)


def byte_poke(memory: Memory, cmd: str):
    """Poke a byte into memory.

    Args:
        memory (Memory): Memory object.
        cmd (str): Command string to be parsed.
    """
    args = cmd.split(" ")
    address = int(args[1], 16)
    value = int(args[2], 16)
    memory.poke(memory.active_page, value, address)


def compare(cpu: CpuX8086, memory: Memory, cmd: str, term: Terminal):
    """Compare two memory locations.

    Args:
        cpu (CpuX8086): CPU Object.
        memory (Memory): Memory object.
        cmd (str): Command string to be parsed.
    """
    args = cmd.split(" ")
    oper1 = int(args[1], 16)
    oper2 = int(args[2], 16)
    oper3 = int(args[3], 16)
    diff_list = cpu.compare(memory, oper1, oper2, oper3)
    for aa in diff_list:
        term.info_message(aa)


def hex_cmd(cmd: str, term: Terminal):
    """Returns the sum and subtraction of two hexadecimal numbers.

    Args:
        cmd (str): Command string to be parsed.
    """
    args = cmd.split(" ")
    oper1 = int(args[1], 16)
    oper2 = int(args[2], 16)
    res_add = oper1 + oper2
    res_sub = oper1 - oper2
    term.info_message('%04X' % res_add, end=" ")
    term.warning_message('%04X' % res_sub)


def search(cpu: CpuX8086, memory: Memory, cmd: str, term: Terminal):
    """Search for a pattern in memory. And print the results.

    Args:
        cpu (CpuX8086): CPU Object.
        memory (Memory): Memory object.
        cmd (str): Command string to be parsed.
    """
    args = cmd.split(" ")
    start = int(args[1], 16)
    pattern = args[2]
    found_list = cpu.search(memory, start, pattern)
    for aa in found_list:
        term.info_message(aa)


def reset_memory_range(cpu: CpuX8086, memory: Memory, cmd: str):
    """Reset a memory range to 0.

    Args:
        cpu (CpuX8086): CPU Object.
        memory (Memory): MNemory object.
        cmd (str): Command string to be parsed.
    """
    args = cmd.split(" ")
    start = int(args[1], 16)
    end = int(args[2], 16)
    cpu.fill(memory, start, end, chr(0))


def fill_memory_range(cpu: CpuX8086, memory: Memory, cmd: str):
    """Fill a memory range with a pattern.

    Args:
        cpu (CpuX8086): CPU Object.
        memory (Memory): Memory object.
        cmd (str): Command line to be parsed.
    """
    args = cmd.split(" ")
    start = int(args[1], 16)
    end = int(args[2], 16)
    pattern = args[3]
    cpu.fill(memory, start, end, pattern)


def setting_memory_page(memory: Memory, cmd: str):
    """Set the active memory page.

    Args:
        memory (Memory): Memory object.
        cmd (str): Command line to be parsed.
    """
    arg = cmd.split(" ")
    memory.active_page = int(arg[1], 16)


def display(cpu: CpuX8086, memory: Memory, cmd: str):
    """Display the content of a memory range.

    Args:
        cpu (CpuX8086): CPU Object.
        memory (Memory): Memory Object.
        cmd (str): Command line to be parsed.
    """
    args = cmd.split(" ")
    a = int(args[1], 16)
    b = int(args[2], 16)
    cpu.display(memory, a, b)


def cat(cpu: CpuX8086, disk: Disk, cmd: str):
    """Display the content of a disk.

    Args:
        cpu (CpuX8086): CPU Object.
        disk (Disk): Disk Object.
        cmd (str): Command line to be parsed.
    """
    args = cmd.split(" ")
    a = int(args[1], 16)
    b = int(args[2], 16)
    cpu.cat(disk, a, b)


def demo(cpu: CpuX8086, memory: Memory, term: Terminal):
    """A Demo text to be loaded into memory.

    Args:
        cpu (CpuX8086): CPU Object.
        memory (Memory): Memory Object.
    """

    def fortune_cookie():
        fortunes = [
            "You will find great success in your future endeavors.",
            "An unexpected opportunity will bring you joy.",
            "New adventures are on the horizon.",
            "Good things are coming your way.",
            "Happiness is not a destination, it's a way of life.",
            "Today is a good day to be kind to yourself.",
            "You will achieve your goals with patience and persistence.",
            "Someone close to you has an important message for you.",
            "A small act of kindness will bring great joy.",
            "Your creativity will lead you to wonderful places."
        ]
        return random.choice(fortunes)

    cpu.load_into(memory, 0, fortune_cookie())
    term.success_message(
        f"The demo text was loaded into {memory.active_page}:0000, enter 'd 0 60' to read it.")


def prompt(mode: str = ""):
    """Define the prompt.

    Args:
        mode (str, optional): Mode.

    Returns:
        str: Prompt.
    """
    cmd = input(
        f"{mode} {AnsiColors.BRIGHT_GREEN.value}•❯{AnsiColors.RESET.value} ")
    return cmd


# Python's entry point
if __name__ == '__main__':

    terminal = Terminal()

    # readline's history
    histfile = os.path.join(os.path.expanduser("~"), ".pebughist")
    try:
        readline.read_history_file(histfile)
        readline.set_history_length(1000)
    except IOError:
        pass

    pebug_main(terminal)

    readline.write_history_file(histfile)
    print("")
    terminal.info_message("Bye! =)")
    terminal.success_message("✔")

    sys.exit(0)
