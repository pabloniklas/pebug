#!/usr/bin/env python3

import os
import re
import readline
import sys

from multipledispatch import dispatch

from modules.asm8086Machine import Disk, Memory, Cpu


def pebug_main(filename="pebug_disk.bin"):
    print("")

    memory = Memory(65536)
    stack = Memory(1)

    disk = Disk(65536, filename)  # 64Kb
    disk.load()

    cpu = Cpu()

    print("pebug - An x86 old-debug-like program written in Python.")
    print("By Pablo Niklas <pablo.niklas@gmail.com>.")
    print(f"Main memory size: {memory.pages} pages.")
    print(f"Stack size: {stack.pages} page/s.")
    print(f"Virtual disk size: {disk.size} bytes.")

    """https://montcs.bloomu.edu/Information/LowLevel/DOS-Debug.html"""
    mode = "C"
    cmd = prompt(mode)
    while not re.match("^[qQ]", cmd):

        if re.match("^[sS] [0-9a-f]{,4} .*$", cmd):
            search(cpu, memory, cmd)
        elif re.match("^[hH] [0-9a-f]{,4} [0-9a-f]{,4}$", cmd):
            hex_cmd(cmd)
        elif re.match("^[rR]$", cmd):
            cpu.print_registers()
            cpu.print_status_flags()
        elif re.match("^[cC] [0-9a-f]{,4} [0-9a-f]{,4} [0-9a-f]{,4}$", cmd):
            compare(cpu, memory, cmd)
        elif re.match("^[cC][aA][tT] [0-9a-f]{,4} [0-9a-f]{,4}$", cmd):
            cat(cpu, disk, cmd)
        elif re.match("^[mM] [0-9a-f]{,4} [0-9a-f]{,4} [0-9a-f]{,4}$", cmd):
            move(cpu, memory, cmd)
        elif re.match("^[oO][vV]$", cmd):
            cpu.OF = 0b1
        elif re.match("^[nN][vV]$", cmd):
            cpu.OF = 0b0
        elif re.match("^[nN][gG]$", cmd):
            cpu.SF = 0b1
        elif re.match("^[pP][lL]$", cmd):
            cpu.sh = 0b0
        elif re.match("^[zZ][rR]$", cmd):
            cpu.ZF = 0b1
        elif re.match("^[nN][zZ]$", cmd):
            cpu.ZF = 0b0
        elif re.match("^[aA][cC]$", cmd):
            cpu.AC = 0b1
        elif re.match("^[nN][aA]$", cmd):
            cpu.AC = 0b0
        elif re.match("^[pP][eE]$", cmd):
            cpu.OP = 0b1
        elif re.match("^[pP][oO]$", cmd):
            cpu.OP = 0b0
        elif re.match("^[cC][yY]$", cmd):
            cpu.CY = 0b1
        elif re.match("^[nN][cC]$", cmd):
            cpu.vy = 0b0
        elif cmd == "?":
            pebug_help()
        elif re.match("^[fF] [0-9a-f]{,4} [0-9a-f]{,4}$", cmd):
            reset_memory_range(cpu, memory, cmd)
        elif re.match("^[fF] [0-9a-f]{,4} [0-9a-f]{,4} .*$", cmd):
            fill_memory_range(cpu, memory, cmd)
        elif re.match("^[dD] [0-9a-f]{,4} [0-9a-f]{,4}$", cmd):
            display(cpu, memory, cmd)
        elif re.match("^[sS][pP] [0-9a-f]{,4}$", cmd):
            setting_memory_page(memory, cmd)
        elif re.match("^[eE] [0-9a-f]{,4} [0-9a-f]{,2}$", cmd):
            byte_poke(memory, cmd)
        elif re.match("^[eE] [0-9a-f]{,4} ['].*[']$", cmd):
            string_poke(cpu, memory, cmd)
        elif re.match("[dD][eE][mM][oO]", cmd):
            demo(cpu, memory)
        elif re.match("[wW] [0-9a-f]{,4} [0-9a-f]{,4} [0-9a-f]{,4}", cmd):
            write(disk, memory, cpu, cmd)
        elif re.match("[lL] [0-9a-f]{,4} [0-9a-f]{,4} [0-9a-f]{,4}", cmd):
            read(disk, memory, cpu, cmd)
        elif re.match("^[nN] ['].*[']$", cmd):
            setname(disk, cmd)

        # Arithmetic mode.
        elif re.match("^[aA][lL][uU]$", cmd):
            print("Welcome to the ALU mode. Enter q to quit this mode.")
            mode = "M"
            cmd = prompt(mode)
            while not re.match("^[qQ]$", cmd):
                if re.match("^[xX][oO][rR] [0-9a-f]{,2} [0-9a-f]{,2}$", cmd):
                    asm_xor(cpu, cmd)
                elif re.match("^[oO][rR] [0-9a-f]{,2} [0-9a-f]{,2}$", cmd):
                    asm_or(cpu, cmd)
                elif re.match("^[aA][nN][dD] [0-9a-f]{,2} [0-9a-f]{,2}$", cmd):
                    asm_and(cpu, cmd)
                elif re.match("^[nN][oO][tT] [0-9a-f]{,2}$", cmd):
                    asm_not(cpu, cmd)
                elif re.match("^[sS][hH][rR] [0-9a-f]{,2}$", cmd):
                    asm_shr(cpu, cmd)
                elif re.match("^[sS][hH][lL] [0-9a-f]{,2}$", cmd):
                    asm_shl(cpu, cmd)
                else:
                    print("Input not recognized.")

                cmd = prompt(mode)
        else:
            print("Input not recognized. Enter <?> for a quick help.")

        mode = "C"
        cmd = prompt(mode)

    disk.save()  # Save vdisk to a _real_ disk.


@dispatch(object, str, int, int)
def _show_result(cpu: Cpu, oper: str, a: int, r: int):
    oper = oper.upper()
    bin_a = cpu.get_bin(a)
    bin_r = cpu.get_bin(r)
    print(f"{oper} {bin_a}({'%02X' % a}) => {bin_r}({'%02X' % r})")
    cpu.print_status_flags()


@dispatch(object, str, int, int, int)
def _show_result(cpu: Cpu, oper: str, a: int, b: int, r: int):
    oper = oper.upper()
    bin_a = cpu.get_bin(a)
    bin_b = cpu.get_bin(b)
    bin_r = cpu.get_bin(r)
    print(f"{oper} {bin_a}({'%02X' % a}) {bin_b}({'%02X' % b}) => {bin_r}({'%02X' % r})")
    cpu.print_status_flags()


def asm_shl(cpu, cmd):
    args = cmd.split(" ")
    oper1 = int(args[1], 16)
    result = cpu.asm_shl(oper1)
    _show_result(cpu, "SHL", oper1, result)


def asm_shr(cpu, cmd):
    args = cmd.split(" ")
    oper1 = int(args[1], 16)
    result = cpu.asm_shr(oper1)
    _show_result(cpu, "SHR", oper1, result)


def asm_not(cpu: Cpu, cmd: str):
    args = cmd.split(" ")
    oper1 = int(args[1], 16)
    result = cpu.asm_not(oper1)
    _show_result(cpu, "NOT", oper1, result)


def asm_or(cpu: Cpu, cmd: str):
    args = cmd.split(" ")
    oper1 = int(args[1], 16)
    oper2 = int(args[2], 16)
    result = cpu.asm_or(oper1, oper2)
    _show_result(cpu, "OR", oper1, oper2, result)


def asm_and(cpu: Cpu, cmd: str):
    args = cmd.split(" ")
    oper1 = int(args[1], 16)
    oper2 = int(args[2], 16)
    result = cpu.asm_and(oper1, oper2)
    _show_result(cpu, "AND", oper1, oper2, result)


def asm_xor(cpu: Cpu, cmd: str):
    args = cmd.split(" ")
    oper1 = int(args[1], 16)
    oper2 = int(args[2], 16)
    result = cpu.asm_xor(oper1, oper2)
    _show_result(cpu, "XOR", oper1, oper2, result)


def setname(disk: Disk, cmd: str):
    args = cmd.split(" ")
    args[1] = args[1][1:]  # To strip the initial '
    filename = " ".join(args[1:])
    disk.filename(filename)


def write(disk: Disk, memory: Memory, cpu: Cpu, cmd: str):
    args = cmd.split(" ")
    address = int(args[1], 16)
    firstsector = int(args[2], 16)
    number = int(args[3], 16)
    cpu.write_to_vdisk(memory, disk, address, firstsector, number)


def read(disk: Disk, memory: Memory, cpu: Cpu, cmd: str):
    args = cmd.split(" ")
    address = int(args[1], 16)
    firstsector = int(args[2], 16)
    number = int(args[3], 16)
    cpu.read_from_vdisk(memory, disk, address, firstsector, number)


def move(cpu: Cpu, memory: Memory, cmd: str):
    args = cmd.split(" ")
    oper1 = int(args[1], 16)
    oper2 = int(args[2], 16)
    oper3 = int(args[3], 16)
    cpu.move(memory, oper1, oper2, oper3)


def string_poke(cpu: Cpu, memory: Memory, cmd: str):
    args = cmd.split(" ")
    address = int(args[1], 16)
    args[2] = args[2][1:]  # To strip the initial '
    value = " ".join(args[2:])
    cpu.load_into(memory, address, value)


def byte_poke(memory: Memory, cmd: str):
    args = cmd.split(" ")
    address = int(args[1], 16)
    value = int(args[2], 16)
    memory.poke(memory.active_page, address, value)


def compare(cpu: Cpu, memory: Memory, cmd: str):
    args = cmd.split(" ")
    oper1 = int(args[1], 16)
    oper2 = int(args[2], 16)
    oper3 = int(args[3], 16)
    diff_list = cpu.compare(memory, oper1, oper2, oper3)
    for aa in diff_list:
        print(aa)


def hex_cmd(cmd: str):
    args = cmd.split(" ")
    oper1 = int(args[1], 16)
    oper2 = int(args[2], 16)
    res_add = oper1 + oper2
    res_sub = oper1 - oper2
    print('%04X' % res_add, '%04X' % res_sub)


def search(cpu: Cpu, memory: Memory, cmd: str):
    args = cmd.split(" ")
    start = int(args[1], 16)
    pattern = args[2]
    found_list = cpu.search(memory, start, pattern)
    for aa in found_list:
        print(aa)


def reset_memory_range(cpu: Cpu, memory: Memory, cmd: str):
    args = cmd.split(" ")
    start = int(args[1], 16)
    end = int(args[2], 16)
    cpu.fill(memory, start, end, chr(0))


def fill_memory_range(cpu: Cpu, memory: Memory, cmd: str):
    args = cmd.split(" ")
    start = int(args[1], 16)
    end = int(args[2], 16)
    pattern = args[3]
    cpu.fill(memory, start, end, pattern)


def setting_memory_page(memory: Memory, cmd: str):
    arg = cmd.split(" ")
    memory.active_page = int(arg[1], 16)


def display(cpu: Cpu, memory: Memory, cmd: str):
    args = cmd.split(" ")
    a = int(args[1], 16)
    b = int(args[2], 16)
    cpu.display(memory, a, b)


def cat(cpu: Cpu, disk: Disk, cmd: str):
    args = cmd.split(" ")
    a = int(args[1], 16)
    b = int(args[2], 16)
    cpu.cat(disk, a, b)


def pebug_help():
    print("See https://github.com/pabloniklas/pebug")


def demo(cpu: Cpu, memory: Memory):
    oldap = memory.active_page
    memory.active_page = 49152
    cpu.load_into(memory, 0, "This is a demo. Welcome.")  # TODO: Random text (like fortune)
    print("The demo text was loaded into C000:0000, type 'd 0 30' to read_from_vdisk it.")
    memory.active_page = oldap


def prompt(mode: str = "-"):
    cmd = input(f"[{mode}]=> ")
    return cmd


# Python's entry point
if __name__ == '__main__':

    # readline's history
    histfile = os.path.join(os.path.expanduser("~"), ".pebughist")
    try:
        readline.read_history_file(histfile)
        readline.set_history_length(1000)
    except IOError:
        pass

    pebug_main()

    readline.write_history_file(histfile)
    sys.exit(0)
