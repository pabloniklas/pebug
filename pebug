#!/usr/bin/env python3

import os
import re
import readline
import sys
import random

from multipledispatch import dispatch

from modules.Disk import Disk
from modules.Memory import Memory
from modules.CpuX8086 import CpuX8086


def pebug_main(filename="pebug_disk.bin"):

    memory = Memory(65536)
    stack = Memory(1)

    disk = Disk(65536, filename)  # 64Kb
    disk.load()

    cpu = CpuX8086()

    # From https://patorjk.com/software/taag/#p=testall&f=Graffiti&t=PEBUG

    print("""
░       ░░░        ░░       ░░░  ░░░░  ░░░      ░░
▒  ▒▒▒▒  ▒▒  ▒▒▒▒▒▒▒▒  ▒▒▒▒  ▒▒  ▒▒▒▒  ▒▒  ▒▒▒▒▒▒▒
▓       ▓▓▓      ▓▓▓▓       ▓▓▓  ▓▓▓▓  ▓▓  ▓▓▓   ▓
█  ████████  ████████  ████  ██  ████  ██  ████  █
█  ████████        ██       ████      ████      ██
                                                   v1.1
    """)
    print("> An x86 old-debug-like program written in Python.")
    print("> By Pablo Niklas <pablo.niklas@gmail.com>.")
    print("> Online manual at https://pebug.readthedocs.io")
    print(f"> History file: {readline.get_history_length()} lines loaded.")
    print(f"> Main memory size: {memory.pages} pages.")
    print(f"> Stack size: {stack.pages} page/s.")
    print(f"> Virtual disk size: {disk.size} bytes.")
    print("")
    print("> Type 'q' to quit the program.")

    """https://montcs.bloomu.edu/Information/LowLevel/DOS-Debug.html"""
    mode = "C"
    cmd = prompt(mode)
    while not re.match(r"^[qQ]", cmd):

        if re.match(r"^[sS] [0-9a-f]{,4} .*$", cmd):
            search(cpu, memory, cmd)
        elif re.match(r"^[hH] [0-9a-f]{,4} [0-9a-f]{,4}$", cmd):
            hex_cmd(cmd)
        elif re.match(r"^[rR]$", cmd):
            cpu.print_registers()
        elif re.match(r"^[cC] [0-9a-f]{,4} [0-9a-f]{,4} [0-9a-f]{,4}$", cmd):
            compare(cpu, memory, cmd)
        elif re.match(r"^[cC][aA][tT] [0-9a-f]{,4} [0-9a-f]{,4}$", cmd):
            cat(cpu, disk, cmd)
        elif re.match(r"^[mM] [0-9a-f]{,4} [0-9a-f]{,4} [0-9a-f]{,4}$", cmd):
            move(cpu, memory, cmd)
        elif re.match(r"^[oO][vV]$", cmd):
            cpu.OF = 0b1
        elif re.match(r"^[nN][vV]$", cmd):
            cpu.OF = 0b0
        elif re.match(r"^[nN][gG]$", cmd):
            cpu.SF = 0b1
        elif re.match(r"^[pP][lL]$", cmd):
            cpu.sh = 0b0
        elif re.match(r"^[zZ][rR]$", cmd):
            cpu.ZF = 0b1
        elif re.match(r"^[nN][zZ]$", cmd):
            cpu.ZF = 0b0
        elif re.match(r"^[aA][cC]$", cmd):
            cpu.AC = 0b1
        elif re.match(r"^[nN][aA]$", cmd):
            cpu.AC = 0b0
        elif re.match(r"^[pP][eE]$", cmd):
            cpu.OP = 0b1
        elif re.match(r"^[pP][oO]$", cmd):
            cpu.OP = 0b0
        elif re.match(r"^[cC][yY]$", cmd):
            cpu.CY = 0b1
        elif re.match(r"^[nN][cC]$", cmd):
            cpu.vy = 0b0
        elif re.match(r"^[fF] [0-9a-f]{,4} [0-9a-f]{,4}$", cmd):
            reset_memory_range(cpu, memory, cmd)
        elif re.match(r"^[fF] [0-9a-f]{,4} [0-9a-f]{,4} .*$", cmd):
            fill_memory_range(cpu, memory, cmd)
        elif re.match(r"^[dD] [0-9a-f]{,4} [0-9a-f]{,4}$", cmd):
            display(cpu, memory, cmd)
        elif re.match(r"^[sS][pP] [0-9a-f]{,4}$", cmd):
            setting_memory_page(memory, cmd)
        elif re.match(r"^[eE] [0-9a-f]{,4} [0-9a-f]{,2}$", cmd):
            byte_poke(memory, cmd)
        elif re.match(r"^[eE] [0-9a-f]{,4} ['].*[']$", cmd):
            string_poke(cpu, memory, cmd)
        elif re.match(r"^[dD][eE][mM][oO]$", cmd):
            demo(cpu, memory)
        elif re.match(r"^[wW] [0-9a-f]{,4} [0-9a-f]{,4} [0-9a-f]{,4}$", cmd):
            write(disk, memory, cpu, cmd)
        elif re.match(r"^[lL] [0-9a-f]{,4} [0-9a-f]{,4} [0-9a-f]{,4}$", cmd):
            read(disk, memory, cpu, cmd)
        elif re.match(r"^[nN] ['].*[']$", cmd):
            setname(disk, cmd)
        elif re.match(r"^[pP] .*$", cmd):
            parse(cpu, cmd)

        # Arithmetic mode.
        elif re.match(r"^[aA]$", cmd):
            print("Welcome to the Assemble mode. Enter 'q' to quit this mode.")
            cmd = prompt(f"{'%04X' % memory.active_page}:{'%04X' % memory.offset_cursor}")
            while not re.match(r"^[qQ]$", cmd):
                cpu.assemble(memory, cmd)

                cmd = prompt(f"{'%04X' % memory.active_page}:{'%04X' % memory.offset_cursor}")
        else:
            _error_msg()

        mode = "C"
        cmd = prompt(mode)

    disk.save()  # Save vdisk to a _real_ disk.


def _error_msg():
    print("Input not recognized.")


@dispatch(object, str, int, int)
def _show_result(cpu: CpuX8086, oper: str, a: int, r: int):
    oper = oper.upper()
    bin_a = cpu.get_bin(a)
    bin_r = cpu.get_bin(r)
    print(f"{oper} {bin_a}({'%02X' % a}) => {bin_r}({'%02X' % r})")
    cpu.print_status_flags()


@dispatch(object, str, int, int, int)
def _show_result(cpu: CpuX8086, oper: str, a: int, b: int, r: int):
    oper = oper.upper()
    bin_a = cpu.get_bin(a)
    bin_b = cpu.get_bin(b)
    bin_r = cpu.get_bin(r)
    print(f"{oper} {bin_a}({'%02X' % a}) {bin_b}({'%02X' % b}) => {bin_r}({'%02X' % r})")
    cpu.print_status_flags()

def setname(disk: Disk, cmd: str):
    args = cmd.split(" ")
    args[1] = args[1][1:]  # To strip the initial '
    filename = " ".join(args[1:])
    disk.filename(filename)

def parse(cpu: CpuX8086, cmd: str):
    args = cmd.split(" ")
    line = args[1:]
    cpu.parse_instruction(" ".join(line))


def write(disk: Disk, memory: Memory, cpu: CpuX8086, cmd: str):
    args = cmd.split(" ")
    address = int(args[1], 16)
    firstsector = int(args[2], 16)
    number = int(args[3], 16)
    cpu.write_to_vdisk(memory, disk, address, firstsector, number)


def read(disk: Disk, memory: Memory, cpu: CpuX8086, cmd: str):
    args = cmd.split(" ")
    address = int(args[1], 16)
    firstsector = int(args[2], 16)
    number = int(args[3], 16)
    cpu.read_from_vdisk(memory, disk, address, firstsector, number)


def move(cpu: CpuX8086, memory: Memory, cmd: str):
    args = cmd.split(" ")
    oper1 = int(args[1], 16)
    oper2 = int(args[2], 16)
    oper3 = int(args[3], 16)
    cpu.move(memory, oper1, oper2, oper3)


def string_poke(cpu: CpuX8086, memory: Memory, cmd: str):
    args = cmd.split(" ")
    address = int(args[1], 16)
    args[2] = args[2][1:]  # To strip the initial '
    value = " ".join(args[2:])
    cpu.load_into(memory, address, value)


def byte_poke(memory: Memory, cmd: str):
    args = cmd.split(" ")
    address = int(args[1], 16)
    value = int(args[2], 16)
    memory.poke(memory.active_page, value, address)


def compare(cpu: CpuX8086, memory: Memory, cmd: str):
    args = cmd.split(" ")
    oper1 = int(args[1], 16)
    oper2 = int(args[2], 16)
    oper3 = int(args[3], 16)
    diff_list = cpu.compare(memory, oper1, oper2, oper3)
    for aa in diff_list:
        print(aa)


def hex_cmd(cmd: str):
    args = cmd.split(" ")
    oper1 = int(args[1], 16)
    oper2 = int(args[2], 16)
    res_add = oper1 + oper2
    res_sub = oper1 - oper2
    print('%04X' % res_add, '%04X' % res_sub)


def search(cpu: CpuX8086, memory: Memory, cmd: str):
    args = cmd.split(" ")
    start = int(args[1], 16)
    pattern = args[2]
    found_list = cpu.search(memory, start, pattern)
    for aa in found_list:
        print(aa)


def reset_memory_range(cpu: CpuX8086, memory: Memory, cmd: str):
    args = cmd.split(" ")
    start = int(args[1], 16)
    end = int(args[2], 16)
    cpu.fill(memory, start, end, chr(0))


def fill_memory_range(cpu: CpuX8086, memory: Memory, cmd: str):
    args = cmd.split(" ")
    start = int(args[1], 16)
    end = int(args[2], 16)
    pattern = args[3]
    cpu.fill(memory, start, end, pattern)


def setting_memory_page(memory: Memory, cmd: str):
    arg = cmd.split(" ")
    memory.active_page = int(arg[1], 16)


def display(cpu: CpuX8086, memory: Memory, cmd: str):
    args = cmd.split(" ")
    a = int(args[1], 16)
    b = int(args[2], 16)
    cpu.display(memory, a, b)


def cat(cpu: CpuX8086, disk: Disk, cmd: str):
    args = cmd.split(" ")
    a = int(args[1], 16)
    b = int(args[2], 16)
    cpu.cat(disk, a, b)


def demo(cpu: CpuX8086, memory: Memory):

    def fortune_cookie():
        fortunes = [
            "You will find great success in your future endeavors.",
            "An unexpected opportunity will bring you joy.",
            "New adventures are on the horizon.",
            "Good things are coming your way.",
            "Happiness is not a destination, it's a way of life.",
            "Today is a good day to be kind to yourself.",
            "You will achieve your goals with patience and persistence.",
            "Someone close to you has an important message for you.",
            "A small act of kindness will bring great joy.",
            "Your creativity will lead you to wonderful places."
        ]
        return random.choice(fortunes)

    oldap = memory.active_page
    memory.active_page = 49152

    cpu.load_into(memory, 0, fortune_cookie())
    print("The demo text was loaded into C000:0000, enter 'd 0 60' to read it.")
    memory.active_page = oldap


def prompt(mode: str = "-"):
    cmd = input(f"[{mode}]=> ")
    return cmd


# Python's entry point
if __name__ == '__main__':

    # readline's history
    histfile = os.path.join(os.path.expanduser("~"), ".pebughist")
    try:
        readline.read_history_file(histfile)
        readline.set_history_length(1000)
    except IOError:
        pass

    pebug_main()

    readline.write_history_file(histfile)
    print("")
    print("Bye! =)")

    sys.exit(0)
